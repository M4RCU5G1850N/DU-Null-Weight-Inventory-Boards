{"slots":{"0":{"name":"DB1","type":{"events":[],"methods":[]}},"1":{"name":"container1","type":{"events":[],"methods":[]}},"2":{"name":"container2","type":{"events":[],"methods":[]}},"3":{"name":"container3","type":{"events":[],"methods":[]}},"4":{"name":"container4","type":{"events":[],"methods":[]}},"5":{"name":"container5","type":{"events":[],"methods":[]}},"6":{"name":"empty","type":{"events":[],"methods":[]}},"7":{"name":"empty","type":{"events":[],"methods":[]}},"8":{"name":"empty","type":{"events":[],"methods":[]}},"9":{"name":"empty","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local getList = container1.getItemsList()\ncontainer1Qty4 = getCount(getList)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"1"},"key":"0"},{"code":"local getList = container2.getItemsList()\ncontainer2Qty4 = getCount(getList)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"2"},"key":"1"},{"code":"local getList = container3.getItemsList()\ncontainer3Qty4 = getCount(getList)","filter":{"args":[],"signature":"storageAcquired()","slotKey":"3"},"key":"2"},{"code":"-- Functions\nfunction containerStatus(percent, nan)\n    if nan == 0 then return \"N/A\"    \n    elseif percent <= 25 then return \"ATTN\"\n    elseif percent > 25 and percent < 50 then return \"LOW\"\n    else return \"GOOD\"\n    end\nend\n\n-- Global Variables\nlocal showSafetyStock = true --export\n\n-- Update system time\nupdate_clock(system.getTime())\n\nsystem.print(\"Board 4 mins:\" .. minutes_text)\n\nlastBatch3BTime = DB1.getStringValue(\"lastBatch3BTime\")\n\n-- START batch sequence\n-- batch 1: update 1-5 on board 1\n\n-- batch 1:  update 6-10 board 2\n-- batch 2:  update 11-14 board 2\n\n-- batch 2: update 15-20 board 3\n-- batch 3: update 21-23 board 3\n\n-- batch 3: update 24-28 here\n\nbatch3Times = { 12, 30, 48 }\n\nif has_value(batch3Times, minutes) then \n    \n     system.print(\"Finish batch 3A @ minute \" .. minutes_text) \n    \n     DB1.setStringValue(\"lastBatch3BTime\", timeText)\n     lastBatch3BTime = timeText \n    \n\tlocal container1List = container1.acquireStorage()\n\tlocal container2List = container2.acquireStorage()\n\tlocal container3List = container3.acquireStorage()\n  \n\t-- Dummy requests to round out the 10 for the cooldown\n     local container5List = container5.acquireStorage()\n     local container5List = container5.acquireStorage() \t\n     local container5List = container5.acquireStorage()\n     local container5List = container5.acquireStorage()\n    \n     system.print(\"Batch 3A done\")\n    \nend\n-- END batch sequence, HTML will still update every minute even w/ no new acquires\n\n-- Contatiner 1 Variables\nlocal container1Enabled = true --export\nlocal container1Label = \"Hex Set\" --export\nlocal container1Density = 0 --export\nif container1Enabled == true then        \n     container1SafetyStock = 20 --export\n     container1Percent = (( container1Qty4/container1SafetyStock ) * 100 )\n     container1Status = containerStatus(container1Percent)\n\tcontainer1Status = containerStatus(container1Percent, container1SafetyStock)\n\tif showSafetyStock == true then\n        container1QtyFull = container1Qty4 .. \"/\" .. container1SafetyStock\n     else\n        container1QtyFull = container1Qty4\n     end\n\tcontainer1HTML = [[\n        <tr>\n          <td>]]..container1Label..[[</td>\n          <td>]]..container1QtyFull..[[</td>\n          <td class=\"]]..container1Status..[[\">]]..container1Status..[[</td>\n          <td>]]..lastBatch3BTime..[[</td>\n        </tr>  \n    ]]\nelse \n     container1HTML = [[]]\nend\t\n-- Contatiner 2 Variables\nlocal container2Enabled = true --export\nlocal container2Label = \"Large Font\" --export\nlocal container2Density = 0 --export\nif container2Enabled == true then   \n    container2SafetyStock = 20 --export\n    container2Percent = (( container2Qty4/container2SafetyStock ) * 100 )\n    container2Status = containerStatus(container2Percent, container2SafetyStock)    \n    if showSafetyStock == true then\n        container2QtyFull = container2Qty4 .. \"/\" .. container2SafetyStock\n    else\n        container2QtyFull = container2Qty4\n    end\n    container2HTML = [[\n        <tr>\n          <td>]]..container2Label..[[</td>\n          <td>]]..container2QtyFull..[[</td>\n          <td class=\"]]..container2Status..[[\">]]..container2Status..[[</td>\n          <td>]]..lastBatch3BTime..[[</td>    \n        </tr>\n    ]]\nelse\n    container2HTML = [[]]\nend\n\nlocal container3Enabled = true --export\nlocal container3Label = \"Small Font\" --export\nlocal container3Density = 0 --export\nif container3Enabled == true then\n    container3SafetyStock = 20 --export\n    container3Percent = (( container3Qty4/container3SafetyStock ) * 100 )\n    container3Status = containerStatus(container3Percent, container3SafetyStock)    \n    if showSafetyStock == true then\n        container3QtyFull = container3Qty4 .. \"/\" .. container3SafetyStock\n    else\n        container3QtyFull = container3Qty4\n    end\n    container3HTML = [[\n        <tr>\n          <td>]]..container3Label..[[</td>\n          <td>]]..container3QtyFull..[[</td>\n          <td class=\"]]..container3Status..[[\">]]..container3Status..[[</td>\n          <td>]]..lastBatch3BTime..[[</td>    \n        </tr>\n    ]]\nelse\n    container3HTML = [[]]\nend\n\nlocal container4Enabled = true --export\nlocal container4Label = \"Concrete\" --export\nlocal container4Density = 27.57 --export\nif container4Enabled == true then\n    container4Mass = container4.getItemsMass()\n    container4Qty = math.ceil(( container4Mass/container4Density ))\n    container4SafetyStock = 3000 --export\n    container4Percent = (( container4Qty/container4SafetyStock ) * 100 )\n    container4Status = containerStatus(container4Percent, container4SafetyStock)\n    if showSafetyStock == true then\n        container4QtyFull = container4Qty .. \"/\" .. container4SafetyStock\n    else\n        container4QtyFull = container4Qty\n    end\n    container4HTML = [[\n        <tr>\n          <td>]]..container4Label..[[</td>\n          <td>]]..container4QtyFull..[[</td>\n          <td class=\"]]..container4Status..[[\">]]..container4Status..[[</td>\n          <td>]]..lastBatch3BTime..[[</td>    \n        </tr>\n    ]]\nelse\n    container4HTML = [[]]\nend\n\nlocal container5Enabled = true --export\nlocal container5Label = \"Steel\" --export\nlocal container5Density = 0 --export\nif container5Enabled == true then\n    container5Mass = container5.getItemsMass()\n    container5Qty = math.ceil(( container5Mass/container5Density ))\n    \n    -- Check for NaN\n    if (container5Qty ~= container5Qty) then container5Qty = 0 end\n        \n    container5SafetyStock = 0 --export\n    container5Percent = (( container5Qty/container5SafetyStock ) * 100 )\n    container5Status = containerStatus(container5Percent, container5SafetyStock)\n    if showSafetyStock == true then\n        container5QtyFull = container5Qty .. \"/\" .. container5SafetyStock\n    else\n        container5QtyFull = container5Qty\n    end\n    container5HTML = [[\n        <tr>\n          <td>]]..container5Label..[[</td>\n          <td>]]..container5QtyFull..[[</td>\n          <td class=\"]]..container5Status..[[\">]]..container5Status..[[</td>\n          <td>]]..lastBatch3BTime..[[</td>    \n        </tr>\n    ]]\nelse\n    container5HTML = [[]]\nend\n\nhtml = [[\n\n        ]]..container1HTML..[[\n        ]]..container2HTML..[[\n        ]]..container3HTML..[[\n        ]]..container4HTML..[[\n        ]]..container5HTML..[[\n            \n]]\n\nDB1.setStringValue(SB3,html)\nDB1.setIntValue(\"container1Qty4\", container1Qty4) -- Save quantity for next reload\nDB1.setIntValue(\"container2Qty4\", container2Qty4)  \nDB1.setIntValue(\"container3Qty4\", container3Qty4)  \nDB1.setIntValue(\"container4Qty4\", container4Qty4)  \nDB1.setIntValue(\"container5Qty4\", container5Qty4)     ","filter":{"args":[{"value":"Live"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"unit.setTimer(\"Live\",60)\ncontainer1Qty4 = DB1.getIntValue(\"container1Qty4\") -- Get quanity from last runtime\ncontainer2Qty4 = DB1.getIntValue(\"container2Qty4\")  \ncontainer3Qty4 = DB1.getIntValue(\"container3Qty4\")  \ncontainer4Qty4 = DB1.getIntValue(\"container4Qty4\")  \ncontainer5Qty4 = DB1.getIntValue(\"container5Qty4\")\n\nfunction getCount(list)\n     count = 0\n\tlocal find = string.find(list, \"SingleUseBlueprint\")\n     if find == nil then \n     \treturn 0;\n     else\n        \n\t\tXstart = find + 60\n\t\tXend = find + 67\n\t\tlocal gotcha = string.sub(list, Xstart, Xend)\n\t\tcount = string.match(gotcha, \"%d+\")\n\t\treturn count;\n     end\nend\n\nfunction has_value (tab, val)\n    for index, value in ipairs(tab) do\n        if value == val then\n            return true\n        end\n    end\n\n    return false\nend\n\nfunction update_clock(n)\n  \n  -- n to d,h,m,s  \n  local day = math.floor(n / (24*3600))\n  n = n % (24 * 3600)\n  local hour = math.floor(n / 3600)\n  n = n % 3600\n  minutes = math.floor(n / 60)\n  n = n % 60\n  local seconds = math.floor(n)\n  \n  -- h,m,s to text   \n  hour_text = tostring(hour)    \n  if string.len(hour_text) <2 then   hour_text = \"0\"..hour_text end\n  \n  minutes_text = tostring(minutes)    \n  if string.len(minutes_text) <2 then   minutes_text = \"0\"..minutes_text end  \n    \n  -- Update system time str  \n  timeText = hour_text .. \":\" .. minutes_text  \n    \n  -- Update minute counters\n  minute10 = tonumber(minutes_text:sub(1, 1))\n  minute1 = tonumber(minutes_text:sub(2, 2))\n\nend\n\n-- Update system time\nupdate_clock(system.getTime())\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}
